---
# Configure clang-tidy for this project.

# Here is an explanation for why some of the checks are disabled:
#
#  -google-readability-namespace-comments: the *_CLIENT_NS is a macro, and
#      clang-tidy fails to match it against the initial value.
#
#  -modernize-use-trailing-return-type: clang-tidy recommends using
#      `auto Foo() -> std::string { return ...; }`, we think the code is less
#      readable in this form.
#
#  -modernize-return-braced-init-list: We think removing typenames and using
#      only braced-init can hurt readability.
#
#  -modernize-avoid-c-arrays: We only use C arrays when they seem to be the
#      right tool for the job, such as `char foo[] = "hello"`. In these cases,
#      avoiding C arrays often makes the code less readable, and stdlower_case::array is
#      not a drop-in replacement because it doesn't deduce the size.
#
#  -performance-move-const-arg: This warning requires the developer to
#      know/care more about the implementation details of types/functions than
#      should be necessary. For example, `A a; F(std::move(a));` will trigger a
#      warning IFF `A` is a trivial type (and therefore the move is
#      meaningless). It would also warn if `F` accepts by `const&`, which is
#      another detail that the caller need not care about.
#
#  -readability-redundant-declaration: A friend declaration inside a class
#      counts as a declaration, so if we also declare that friend outside the
#      class in order to document it as part of the public API, that will
#      trigger a redundant declaration warning from this check.
#
Checks: >
  -*,
  bugprone-*,
  google-*,
  misc-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*,
  -google-readability-braces-around-statements,
  -google-readability-namespace-comments,
  -google-runtime-references,
  -misc-non-private-member-variables-in-classes,
  -modernize-return-braced-init-list,
  -modernize-use-trailing-return-type,
  -modernize-avoid-c-arrays,
  -performance-move-const-arg,
  -readability-braces-around-statements,
  -readability-magic-numbers,
  -readability-named-parameter,
  -readability-redundant-declaration
# Turn all the warnings from the checks above into errors.
WarningsAsErrors: "*"

HeaderFilterRegex: 'src[^/]*\.(h|hxx|cxx)$'

CheckOptions:
  - { key: readability-identifier-naming.AbstractClassCase,             value: CamelCase  }
  - { key: readability-identifier-naming.ClassCase,                     value: CamelCase  }
  - { key: readability-identifier-naming.ClassConstantCase,             value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase,               value: lower_case }
  - { key: readability-identifier-naming.ClassMethodCase,               value: CamelCase  }
  - { key: readability-identifier-naming.ConstantCase,                  value: lower_case }
  - { key: readability-identifier-naming.ConstantMemberCase,            value: lower_case }
  - { key: readability-identifier-naming.ConstantParameterCase,         value: lower_case }
  - { key: readability-identifier-naming.ConstantPointerParameterCase,  value: lower_case }
  - { key: readability-identifier-naming.ConstexprFunctionCase,         value: lower_case }
  - { key: readability-identifier-naming.ConstexprVariableCase,         value: lower_case }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,       value: k          }
  - { key: readability-identifier-naming.EnumCase,                      value: CamelCase  }
  - { key: readability-identifier-naming.EnumConstantCase,              value: aNy_CasE   }
  - { key: readability-identifier-naming.FunctionCase,                  value: lower_case }
  - { key: readability-identifier-naming.GetConfigPerFile,              value: true       }
  - { key: readability-identifier-naming.GlobalConstantCase,            value: lower_case }
  - { key: readability-identifier-naming.GlobalConstantPointerCase,     value: lower_case }
  - { key: readability-identifier-naming.GlobalFunctionCase,            value: lower_case }
  - { key: readability-identifier-naming.GlobalPointerCase,             value: lower_case }
  - { key: readability-identifier-naming.GlobalVariableCase,            value: lower_case }
  - { key: readability-identifier-naming.IgnoreMainLikeFunctions,       value: 0          }
  - { key: readability-identifier-naming.InlineNamespaceCase,           value: lower_case }
  - { key: readability-identifier-naming.LocalConstantCase,             value: lower_case }
  - { key: readability-identifier-naming.LocalConstantPointerCase,      value: lower_case }
  - { key: readability-identifier-naming.LocalPointerCase,              value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase,             value: lower_case }
  - { key: readability-identifier-naming.MacroDefinitionCase,           value: UPPER_CASE }
  - { key: readability-identifier-naming.MemberCase,                    value: lower_case }
  - { key: readability-identifier-naming.MemberConstantCase,            value: UPPER_CASE }
  - { key: readability-identifier-naming.MethodCase,                    value: lower_case }
  - { key: readability-identifier-naming.NamespaceCase,                 value: lower_case }
  - { key: readability-identifier-naming.ParameterCase,                 value: lower_case }
  - { key: readability-identifier-naming.ParameterPackCase,             value: lower_case }
  - { key: readability-identifier-naming.PointerParameterCase,          value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase,             value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberPrefix,           value: _          }
  - { key: readability-identifier-naming.PrivateMethodCase,             value: lower_case }
  - { key: readability-identifier-naming.ProtectedMemberCase,           value: lower_case }
  - { key: readability-identifier-naming.ProtectedMemberPrefix,         value: _          }
  - { key: readability-identifier-naming.ProtectedMethodCase,           value: lower_case }
  - { key: readability-identifier-naming.PublicMemberCase,              value: lower_case }
  - { key: readability-identifier-naming.PublicMethodCase,              value: lower_case }
  - { key: readability-identifier-naming.ScopedEnumConstantCase,        value: CamelCase  }
  - { key: readability-identifier-naming.StaticConstantCase,            value: CamelCase  }
  - { key: readability-identifier-naming.StaticVariableCase,            value: lower_case }
  - { key: readability-identifier-naming.StaticVariablePrefix,          value: _          }
  - { key: readability-identifier-naming.StructCase,                    value: CamelCase  }
  - { key: readability-identifier-naming.TypeAliasCase,                 value: CamelCase  }
  - { key: readability-identifier-naming.TypeAliasSuffix,               value: _t         }
  - { key: readability-identifier-naming.TypedefCase,                   value: CamelCase  }
  - { key: readability-identifier-naming.TypedefSuffix,                 value: _t         }
  - { key: readability-identifier-naming.UnionCase,                     value: lower_case }
  - { key: readability-identifier-naming.VariableCase,                  value: lower_case }
  - { key: readability-identifier-naming.VirtualMethodCase,             value: lower_case }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions, value: 1          }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions, value: 1          }
